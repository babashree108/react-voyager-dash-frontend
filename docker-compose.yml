version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: nxtclass-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-nxtclass_root_2024}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-nxtclass_db}
      MYSQL_USER: ${MYSQL_USER:-nxtclass_user}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-nxtclass_pass_2024}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "3306:3306"
    networks:
      - nxtclass-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nxtclass-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILE: ${SPRING_PROFILE:-prod}
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/${MYSQL_DATABASE:-nxtclass_db}?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER:-nxtclass_user}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD:-nxtclass_pass_2024}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: ${SHOW_SQL:-false}
      SERVER_PORT: 8080
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost}
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - nxtclass-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost/api}
    container_name: nxtclass-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - nxtclass-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # n8n for Workflow Automation (Optional)
  n8n:
    image: n8nio/n8n:latest
    container_name: nxtclass-n8n
    restart: unless-stopped
    environment:
      N8N_BASIC_AUTH_ACTIVE: ${N8N_BASIC_AUTH_ACTIVE:-true}
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-change_me_n8n_2024}
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678/}
      GENERIC_TIMEZONE: ${TIMEZONE:-Asia/Kolkata}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - nxtclass-network
    profiles:
      - with-n8n

networks:
  nxtclass-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  n8n_data:
    driver: local
